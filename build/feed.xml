<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eric McDaniel</title>
    <atom:link href="http://ericmcd.com//feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://ericmcd.com/</link>
    <description>fun with the web</description>
    <pubDate>Fri, 07  Aug 2015 11:42:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Browsers as Peers</title>
      <link>http://ericmcd.com//articles/browsers-as-peers/</link>
      <pubDate>Fri, 07  Aug 2015 11:42:00 -0400</pubDate>
      <guid isPermaLink="true">http://ericmcd.com//articles/browsers-as-peers/</guid>
      <author></author>
      <description>&lt;p&gt;Visions of peer-to-peer applications in the browser
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently developed an interest in peer-to-peer (or P2P) communication in
the browser. Simply put, the term “P2P” refers to a model where clients can communicate
with eachother without the help of a central server. P2P communication is
considered a decentralized model, as opposed to a centralized model like
Facebook Chat, where messages pass through Facebook’s server(s).&lt;/p&gt;
&lt;p&gt;In my opinion, the two most notable benefits of P2P are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lower latency and increased reliability (no central point of failure).&lt;/li&gt;
&lt;li&gt;Privacy due to lack of a central server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;p2p-in-the-browser&quot;&gt;P2P in the browser&lt;/h3&gt;
&lt;p&gt;Since P2P results in more rapid, reliable and secure transfer of data, it’s a
prime candidate for real-time communication (RTC). RTC in the browser had been
restricted to the use of centralized models &lt;a href=&quot;http://lists.w3.org/Archives/Public/public-webrtc/2011May/0022.html&quot; title=&quot;WebRTC release&quot;&gt;until 2011&lt;/a&gt;,
when Google released &lt;a href=&quot;http://w3c.github.io/webrtc-pc/&quot; title=&quot;WebRTC WC3 Editors Draft&quot;&gt;WebRTC&lt;/a&gt;,
an open source protocol for browsers to implement real-time voice, video and
arbitrary data on the web with built-in encryption to boot.&lt;/p&gt;
&lt;p&gt;While reading up on WebRTC, I bumped in to a library called &lt;a href=&quot;http://peerjs.com/,&quot; title=&quot;PeerJS website&quot;&gt;PeerJS&lt;/a&gt;.
PeerJS exposes a &lt;a href=&quot;http://socket.io/&quot; title=&quot;SocketIO website&quot;&gt;socket.io&lt;/a&gt;-style
interface for WebRTC, making it easier to author P2P applications. The interface
PeerJS provides is a welcome change from manipulating &lt;code&gt;RTCPeerConnection&lt;/code&gt;,
&lt;code&gt;getUserMedia&lt;/code&gt;, etc. yourself.&lt;/p&gt;
&lt;p&gt;Here’s a code example of a simple PeerJS app:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Peer &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'peerjs'&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Establish a connection to the PeerServer with our API key&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; peer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Peer({ key: &lt;span class=&quot;string&quot;&gt;'xxxxxx'&lt;/span&gt; });

&lt;span class=&quot;comment&quot;&gt;// Create an array of DataConnection objects&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; connections = [];

&lt;span class=&quot;comment&quot;&gt;// Notify user with their peer identity&lt;/span&gt;
peer.on(&lt;span class=&quot;string&quot;&gt;'open'&lt;/span&gt;, (id) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Your id is &lt;span class=&quot;subst&quot;&gt;${id}&lt;/span&gt;`&lt;/span&gt;));

&lt;span class=&quot;comment&quot;&gt;// Handle connections from remote peers&lt;/span&gt;
peer.on(&lt;span class=&quot;string&quot;&gt;'connection'&lt;/span&gt;, handleConnection);

&lt;span class=&quot;comment&quot;&gt;// Set up event handlers for `data` and `close` events&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleConnection&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;conn&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Connected to peer &lt;span class=&quot;subst&quot;&gt;${conn.id}&lt;/span&gt;`&lt;/span&gt;);

  &lt;span class=&quot;comment&quot;&gt;// Add the connection to our array of DataConnections&lt;/span&gt;
  connections.push(conn);

  &lt;span class=&quot;comment&quot;&gt;// Log arbitrary data received from peers&lt;/span&gt;
  conn.on(&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;, (data) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Peer data:'&lt;/span&gt;, data));

  &lt;span class=&quot;comment&quot;&gt;// Remove connection from list of connections on close&lt;/span&gt;
  conn.on(&lt;span class=&quot;string&quot;&gt;'close'&lt;/span&gt;, () =&amp;gt; connections.splice(connections.indexOf(conn), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));
}

&lt;span class=&quot;comment&quot;&gt;// Connect to remote peers through the console&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.connectToPeer = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;id&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Connecting to peer with id &lt;span class=&quot;subst&quot;&gt;${id}&lt;/span&gt;`&lt;/span&gt;);
  &lt;span class=&quot;comment&quot;&gt;// Connect to peer browser via PeerServer&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; conn = peer.connect(id);
  &lt;span class=&quot;comment&quot;&gt;// Handle the connection&lt;/span&gt;
  handleConnection(conn);
};

&lt;span class=&quot;comment&quot;&gt;// Send arbitrary data to connected peers&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.sendDataToPeers = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{
  connections.forEach((conn) =&amp;gt; conn.send(data));
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p id=&quot;peer-example&quot; class=&quot;Box Box--aside&quot;&gt;
A version of this script is running on the page right now. In fact, your peer
identity is &lt;code id=&quot;peer-id&quot;&gt;&lt;/code&gt;! Try using the global methods defined
above in the console to connect to a friend and send messages.
&lt;/p&gt;

&lt;p&gt;If you’re particularly observant, you may notice something in the client code
that contradicts my previous statements. We’re using the &lt;code&gt;Peer&lt;/code&gt; constructor
to establish a connection with a third-party server and receive an identity.
But I just implied that P2P uses no central server to establish a connection
to peers! This is a limitation of the protocol. WebRTC still needs servers,
known as signaling servers, in order to establish connections between clients.&lt;/p&gt;
&lt;p&gt;In some cases, a user may be behind a NAT or &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;Network Address Translation&lt;/a&gt;. NAT is a method used to expose an entire network as a single IP address. In this case, we need
an additional server to retrieve the true IP of the client, and another server
to send data between peers as a fallback. A detailed guide to the WebRTC
infrastructure can be found in this excellent &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/&quot; title=&quot;html5rocks WebRTC infrastructure overview&quot;&gt;html5rocks overview&lt;/a&gt;. PeerJS does not include implementations of
these servers out of the box, but it does provide an easy way to integrate them
into your application.&lt;/p&gt;
&lt;p&gt;PeerJS does, however, trivialize the aformentioned signaling problem with
&lt;a href=&quot;https://github.com/peers/peerjs-server&quot; title=&quot;PeerServer GitHub repo&quot;&gt;PeerServer&lt;/a&gt;:
a Node-based, open source implementation of a signaling server. The
package ships with middleware for Express making it simple to integrate into a
pre-existing application. Setting up the server is demonstrated well at the
GitHub repository in the link above, so I won’t cover it here. You can also
use the PeerServer cloud API, like I did in the example. This process is covered
in the &lt;a href=&quot;http://peerjs.com/docs&quot; title=&quot;PeerJS docs&quot;&gt;PeerJS docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;result-sea-change-in-web-applications-&quot;&gt;Result: sea change in web applications?&lt;/h3&gt;
&lt;p&gt;As you can see, building applications with WebRTC is a piece of cake, especially
when using a library like PeerJS. But regardless of it’s ease of use,
is the protocol going to drastically change the Web? There are &lt;a href=&quot;https://github.com/webrtc/samples&quot; title=&quot;WebRTC samples&quot;&gt;plenty of sample
projects&lt;/a&gt; around that
demonstrate the capabilities of WebRTC, but does the technology have any place
in web applications other than simple P2P games and Skype clones?&lt;/p&gt;
&lt;p&gt;I tend to envision wacky application ideas during my commute. What else would
I be doing in gridlock traffic? I imagined a sort-of live blogging platform,
where users configure “containers” to share data in real time with other peers
in the form of audio, video, files and messages. Peers could subsequently
share those streams of information to their network of peers by acting as a
proxy. It would be kind of like a real-time, ephemeral Facebook. All in the
browser! Then I got honked at.&lt;/p&gt;
&lt;p&gt;In any case, I think we’ll be seeing a lot of WebRTC in the near future.&lt;/p&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.14/peer.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;main.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
</description>
    </item>
    <item>
      <title>Sort By Relationship With Eloquent ORM</title>
      <link>http://ericmcd.com//articles/eloquent-sort-by-relationship/</link>
      <pubDate>Thu, 20 Nov 2014 07:30:00 -0500</pubDate>
      <guid isPermaLink="true">http://ericmcd.com//articles/eloquent-sort-by-relationship/</guid>
      <author></author>
      <description>&lt;p&gt;Sort and order an API resource by relationship in Laravel’s object relational mapper
&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I decided to build an API in &lt;a href=&quot;http://laravel.com/&quot; title=&quot;Laravel Website&quot;&gt;Laravel&lt;/a&gt; as the backend for my team’s time tracking application. Laravel has all of the necessary tools to build full-scale applications, and I used it for it’s superb router, controllers, query builder and object relational mapper (dubbed &lt;a href=&quot;http://laravel.com/docs/4.2/eloquent&quot; title=&quot;Eloquent Docs&quot;&gt;Eloquent&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I was having trouble sorting collections pulled from my endpoints. Basic sorting with Laravel’s query builder is &lt;a href=&quot;http://laravel.com/docs/4.2/queries#selects&quot; title=&quot;Laravel Query Builder&quot;&gt;dead simple&lt;/a&gt;, but I wanted to sort by properties on related models. In this particular case, I wanted to sort a set of sub-projects by the name of their parent project. Simple, right?&lt;/p&gt;
&lt;p&gt;It appears Eloquent doesn’t have this functionality out of the box, but fortunately Laravel has a useful feature called &lt;a href=&quot;http://laravel.com/docs/4.2/eloquent#query-scopes&quot; title=&quot;Laravel Query Scopes&quot;&gt;Query Scopes&lt;/a&gt; that allow for custom, chainable Eloquent methods.&lt;/p&gt;
&lt;p&gt;Query scopes are easy to define. Simply prefix the name of a static method on a model with “scope”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ResourceModel&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Eloquent&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scopeParseSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt;)&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now access this method as a static member on the &lt;code&gt;ResourceModel&lt;/code&gt; class, like &lt;code&gt;ResourceModel::parseSort()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to perform the sorting without using multiple query parameters in the request. The method I devised splits a single &lt;code&gt;sort&lt;/code&gt; query parameter by a delimiter and makes a few assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first segment (&lt;code&gt;$split[0]&lt;/code&gt;) is the other table’s name&lt;/li&gt;
&lt;li&gt;the second segment (&lt;code&gt;$split[1]&lt;/code&gt;) is the column to sort by&lt;/li&gt;
&lt;li&gt;the foreign key name is the singular form of the other table’s name + “_id”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is an example implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scopeParseSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt;)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;)) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;;
    }

    &lt;span class=&quot;variable&quot;&gt;$split&lt;/span&gt; = explode(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count(&lt;span class=&quot;variable&quot;&gt;$split&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) {
        &lt;span class=&quot;variable&quot;&gt;$sortTable&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$split&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
        &lt;span class=&quot;variable&quot;&gt;$sortColumn&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$split&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];
        &lt;span class=&quot;variable&quot;&gt;$fkPrefix&lt;/span&gt; = rtrim(&lt;span class=&quot;variable&quot;&gt;$sortTable&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'s'&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;// ResourceModel method that returns name of table as a string,&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// see https://github.com/laravel/framework/issues/1436&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::getTableName();
        &lt;span class=&quot;variable&quot;&gt;$keyName&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt; . &lt;span class=&quot;variable&quot;&gt;$fkPrefix&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;'_id'&lt;/span&gt;;

        &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;
            -&amp;gt;join(&lt;span class=&quot;variable&quot;&gt;$sortTable&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$keyName&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'='&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$sortTable&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;'.id'&lt;/span&gt;)
            -&amp;gt;orderBy(&lt;span class=&quot;variable&quot;&gt;$sortColumn&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt;)
            -&amp;gt;addSelect(&lt;span class=&quot;variable&quot;&gt;$table&lt;/span&gt; . &lt;span class=&quot;string&quot;&gt;'.*'&lt;/span&gt;);
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;-&amp;gt;orderBy(&lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt;);
    }

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;parseSort&lt;/code&gt; is then executable as a static member on classes that inherit from &lt;code&gt;ResourceModel&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-php&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ProjectController&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ResourceController&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;
    &lt;/span&gt;{
        &lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt; = Input::get(&lt;span class=&quot;string&quot;&gt;'sort'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'id'&lt;/span&gt;);
        &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt; = Input::get(&lt;span class=&quot;string&quot;&gt;'order'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'asc'&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;// Execute parseSort with the sort and order `GET` parameters&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt; = SubProject::parseSort(&lt;span class=&quot;variable&quot;&gt;$sort&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$order&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;// ResourceController method, retrieve and format the collection of models&lt;/span&gt;
        &lt;span class=&quot;variable&quot;&gt;$resource&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;getResource(&lt;span class=&quot;variable&quot;&gt;$query&lt;/span&gt;);

        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$this&lt;/span&gt;-&amp;gt;respond(&lt;span class=&quot;variable&quot;&gt;$resource&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this implementation, the response from the URI “/api/sub_projects?sort=projects.name” would include a collection of sub-projects sorted by the names of their parent projects.&lt;/p&gt;
&lt;p&gt;Keep in mind that there are some major limitations with the current state of &lt;code&gt;queryParseSort&lt;/code&gt;. You can only search by properties that are one relationship deep, and foreign keys/tables must follow strict naming conventions.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>